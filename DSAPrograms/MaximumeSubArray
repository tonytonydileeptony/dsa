
class Solution {
  public static int MaximumeSubArray(int[] arr){
    int currentMax=0;
    int maxSoFar=arr[0];
    for(int i=0;i<arr.length;i++){
      currentMax+=arr[i];
      if(currentMax>maxSoFar){
        maxSoFar=currentMax;  

      }
      if(currentMax<0){
        currentMax=0;
      }
    }
    return maxSoFar;
  }
  public static void main(String[] args) {
  int[] nums = {-2,1,-3,4,-1,2,1,-5,4};

 System.out.print(MaximumeSubArray(nums));
  }
}




Removing Duplicates in the array
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
 

class Solution {
  public static List<Integer> maxWaterStorage(int[] arr){
    List<Integer> list=new ArrayList<>();
    for(int num:arr){
      int index=Math.abs(num)-1;
      if(arr[index]<0){
       list.add(Math.abs(num));
      }
      else{
        arr[index]=-arr[index];
      }
    }
 
   
   

return list;

  }
 public static void main(String[] args) {
        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};
        List<Integer> result = maxWaterStorage(nums);

        System.out.println("Merged Intervals:"+ result.toString());
        
    }
}











Two SUm:-

import java.io.*;
import java.util.*;


 

class Solution {
  public static int[] twoSum(int[] arr,int target){
    Map<Integer,Integer>  map=new HashMap<>();
    for(int i=0;i<arr.length;i++){
      int dif=target-arr[i];
      if(map.containsKey(dif)){
        return new int[]{arr[i],dif};
      }
      map.put(arr[i],i);
    }

    return new int[]{1};
  }
  public static void main(String[] args) {
  int[] nums = {2, 7, 11, 15};
  int target =9;  
  int[] arr=twoSum(nums,target);
  for(int a:arr)
  System.out.print(a+" "); 
  }
}





Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
 

class Solution {
  public static int[][] merge(int[][] intervals){
    if(intervals.length<=1)
    return intervals;
    Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));
    int[] current=intervals[0];
    List<int[]> merged=new ArrayList<>();
    for(int i=1;i<intervals.length;i++){
      if(intervals[i][0]<current[1]){
        current[1]=Math.max(current[1],intervals[i][1]);
      }
      else{
        merged.add(current);
        current=intervals[i];
      }
    }
    merged.add(current);
    return merged.toArray(new int[merged.size()][]);



  }
 public static void main(String[] args) {
        int[][] intervals = {{1,3},{2,6},{8,10},{15,18}};
        int[][] result = merge(intervals);

        System.out.println("Merged Intervals:");
        for (int[] interval : result) {
            System.out.println(Arrays.toString(interval));
        }
    }
}

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
 

class Solution {
  public static int[] productOfArrayExceptIt(int[] arr){
    int[] result=new int[arr.length];
   result[0]=1;

   for(int i=1;i<arr.length;i++){
    result[i]=result[i-1]*arr[i-1];
   }
   int suffix=1;
  for(int i=arr.length-1;i>=0;i--){
    result[i]=result[i]*suffix;
    suffix*=arr[i];
  }

return result;

  }
 public static void main(String[] args) {
        int[] intervals = {1,3,4,5,6};
        int[] result = productOfArrayExceptIt(intervals);

        System.out.println("Merged Intervals:");
        for (int l : result) {
            System.out.println(l);
        }
    }
}



Move All Zeros


/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
 

class Solution {
  public static int[] moveAllZeros(int[] arr){
    int slow=0;
    for(int i=0;i<arr.length;i++){
      if(arr[i]!=0){
        arr[slow++]=arr[i];
      }
    }
    for(int i=slow;i<arr.length;i++){
      arr[i]=0;
    }
   

return arr;

  }
 public static void main(String[] args) {
        int[] intervals = {1,0,3,4,0,5,6};
        int[] result = moveAllZeros(intervals);

        System.out.println("Merged Intervals:");
        for (int l : result) {
            System.out.println(l);
        }
    }
}

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.security.auth.kerberos.KerberosPrincipal;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
reversing an array with target value; 

class Solution {
  public static void reverseArray(int []nums,int k){
    k=k%nums.length;
     //int [] arr=new int[nums.length];
    reverse(nums,0,nums.length-1);
    reverse(nums,0,k-1);
    reverse(nums,k,nums.length-1);
    
  }
  public static int[] reverse(int[] arr,int start,int end){
  while(start<end){
    int temp=arr[start];
    arr[start++]=arr[end];
    arr[end--]=temp;
  }
    

return null;

  }
 public static void main(String[] args) {
        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};
        int k=8;
        reverseArray(nums,k);
        for(int i=0;i<nums.length;i++)
        System.out.print(" "+ nums[i]);
        
    }
}
Missing Value in array

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.security.auth.kerberos.KerberosPrincipal;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
 

class Solution {
  public static int missIngValue(int []nums){
    int n=nums.length;
    int expectedsum=n*(n+1)/2;
    int currentsum=0;
    for(int num:nums)
{
  currentsum+=num;
} 
return expectedsum-currentsum;  
  

  }
 public static void main(String[] args) {
        int[] nums = {0,1,3,5,4};
        int k=8;
       System.out.print( missIngValue(nums));
 }}

/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

import javax.security.auth.kerberos.KerberosPrincipal;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */
 

class Solution {
  public static int missIngValue(int []nums){
   int xor=0;
   for(int i=0;i<=nums.length;i++){
    xor^=i;
   }  
  for(int num:nums){
    xor^=num;
  }
  return xor;
  }
 public static void main(String[] args) {
        int[] nums = {0,1,2,3,5,4,7};
        int k=8;
       System.out.print( missIngValue(nums));
 }}
